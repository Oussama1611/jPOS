plugins {
   id "org.gradlex.extra-java-module-info" version "1.9"
   id "org.owasp.dependencycheck" version "11.1.0"
   id 'org.cyclonedx.bom' version '2.3.0' 
   // id 'checkstyle'
}

extraJavaModuleInfo {
    failOnMissingModuleInfo.set(false)
    automaticModule ('org.javatuples:javatuples', 'org.javatuples')
    automaticModule ('org.hdrhistogram:HdrHistogram', 'org.hdrhistogram.HdrHistogram')
    automaticModule ('org.apache-extras.beanshell:bsh', 'bsh')
    automaticModule ('com.sleepycat:je', 'com.sleepycat.je')
    automaticModule ('jdbm:jdbm', 'org.jdbm')
}

dependencies { 
    api libs.jdom
    api libs.javatuples
    api libs.jline
    api libs.jna
    api libs.jansi
    api libs.beanshell
    api libs.bcpg
    api libs.commonscli
    api libs.micrometercore
    api libs.micrometerprometheus
    api libs.jacksonCore
    api libs.jacksonDataBind
    api libs.jacksonDataTypeJSR310
    api libs.jacksonDataFormatXML
    
    implementation libs.yaml;
    implementation libs.jdbm
    implementation libs.sleepycatje
    implementation libs.hdrhistogram

    testImplementation libs.commonslang3
    testImplementation libs.hamcrest
    testImplementation libs.xmlunit
    testImplementation libs.junit
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation (libs.mockito) {
        exclude(module: 'hamcrest-core')
    }
    testImplementation libs.mockitojupiter

    //  JSONPackager on hold
    //    compile (libraries.jsonsimple) {
    //        exclude(module: 'junit')
    //        exclude(module: 'hamcrest-core')
    //    }
    // Integrated OSGI framework
    // compile 'org.apache.felix:org.apache.felix.framework:5.0.0'
}

def q2ArchiveJarName="${project.name}-${project.version}-q2.jar"
def jposCopySpec = copySpec {
    def cfg = new Properties()
    def target = project.hasProperty('target') ? target : 'devel'
    cfg.put('jarname', q2ArchiveJarName.toString())
    cfg.put('target', target.toString())
    File cfgFile = file("${target}.properties")
    if (cfgFile.exists()) {
        cfgFile.withInputStream{
            cfg.load(it);   
        }
    }
    from(file("src/dist")) {
        exclude 'cfg/*.lmk'
        exclude 'cfg/*.jks'
        exclude 'cfg/*.ks'
        exclude 'cfg/*.ser'
        exclude 'cfg/authorized_keys'
        filter(
            org.apache.tools.ant.filters.ReplaceTokens, 
            tokens: cfg
        )
    }
    from(file("src/dist")) {
        include 'cfg/*.lmk'
        include 'cfg/*.ks'
        include 'cfg/*.jks'
        include 'cfg/*.ser'
        include 'cfg/authorized_keys'
    }
    from(file("${project.buildDir}/libs/${q2ArchiveJarName}"))
    into("lib") {
        from(configurations.runtimeClasspath)
    }
    /*
    filePermissions {
       user {
         read = true
         write = false
         execute = false
       }
       group {
         read = false
         write = false
         execute = false
       }
       other {
         read = false
         write = false
         execute = false
       }
    }
    */
}

task listJars {
    doLast {
        configurations.testCompile.each { File file -> println file.name }
        println "    libsDir: ${project.libsDir}"
        println "libsDirName: ${project.libsDirName}"
        println "libsDirName: ${project.libsDirName}"
        println "    project: ${project.buildDir}"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'jPOS', 
                   'Implementation-Version': project.version
    }
}

java {
   withSourcesJar()
}

task q2jar (type: Jar) {
    dependsOn jar
    archiveClassifier.set('q2')
    from sourceSets.main.output.classesDirs, sourceSets.main.output.resourcesDir
    manifest {
        def manifestClasspath = configurations.runtimeClasspath.collect { "lib/" + it.getName() }.join(' ') 
        attributes 'Implementation-Title': 'jPOS', 
                   'Implementation-Version': project.version,
                   'Main-Class': 'org.jpos.q2.Q2',
                   'Class-Path': manifestClasspath
    }
}

//checkstyle {
//    ignoreFailures = true
//    configFile file("${rootProject.projectDir}/.github/linters/sun_checks.xml")
//}

task sourceJar( type: Jar ) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar, javadocJar
}

task dist (type: Tar) { 
    dependsOn 'jar', 'assemble', 'sourceJar'
    compression = Compression.GZIP
    includeEmptyDirs=true
    with jposCopySpec
    into "jpos-$project.version"
    archiveExtension="tar.gz"
}

task zip (type: Zip) { 
    dependsOn 'q2jar', 'assemble', 'sourceJar'
    includeEmptyDirs=true
    includeEmptyDirs=true
    with jposCopySpec
    into "jpos-$project.version"
}

task version (type: JavaExec, dependsOn: classes) {
    description = "Display jPOS Version"
    mainClass = 'org.jpos.q2.Q2'
    args = "--version".split().toList()
    classpath sourceSets.main.runtimeClasspath
}

// just an alias to keep the old install task name
task install(dependsOn: publishToMavenLocal) {}


class GitRevisionTask extends DefaultTask
{
    @InputFile @Optional
    File gitHead

    @Input 
    boolean gotHead

    @InputFile @Optional
    File getRefFile() {
        File rf = new File(gitHead.parent,gitHead.text.replace('ref: ', '').trim())
        return rf.exists() ? rf : gitHead
    }

    @OutputFile
    File outputFile

    @TaskAction
    public void writeFile()
    {
        Properties props=new Properties()
        if (gotHead) {
            File ref=getRefFile()
            if (ref != null && ref.exists()) {
                props.put("branch",ref.getName())
                props.put("revision",ref.text.substring(0,7))
            } else {
                props.put("branch", "detached");
                props.put("revision", gitHead.text.substring(0,7))
            }
        } else {
            props.put("branch", "unknown");
            props.put("revision", "unknown");
        }
        props.store(new FileOutputStream(outputFile),"Revision Properties")
    }
}

class BuildTimestampTask extends DefaultTask {
    @OutputFile
    File outputFile

    @Input
    String version

    @TaskAction
    public void writeFile() {
        new File(outputFile.parent).mkdirs()
        Properties props=new Properties()
        props.put("version", version);
        props.put("buildTimestamp", new Date().format("yyyy-MM-dd HH:mm:ss z"));
        props.store(new FileOutputStream(outputFile),"Revision Properties")
    }
}

task createRevisionPropertyFile(type: GitRevisionTask) {
    gitHead = "$rootDir/.git/HEAD" as File
    gotHead = gitHead.exists()
    if (!gotHead)
        gitHead = null;
    outputFile = "$sourceSets.main.output.resourcesDir/org/jpos/q2/revision.properties" as File
}

task createBuildTimestampPropertyFile(type: BuildTimestampTask) {
    outputFile = "$sourceSets.main.output.resourcesDir/org/jpos/q2/buildinfo.properties" as File
    version = project.version
}

processResources.dependsOn createBuildTimestampPropertyFile, createRevisionPropertyFile
processResources.outputs.upToDateWhen{ false } // issue with Gradle 2.4 confused about UP-TO-DATE (works OK with 2.3)

task installApp(type: Sync) {
    dependsOn q2jar
    def buildDir = project.buildDir
    def projectName = project.name

    delete "${buildDir}/install/${projectName}/cfg"
    description = 'Installs jPOS based application'
    into { file("${buildDir}/install/${projectName}") }
    with jposCopySpec
}

task viewTests (description: 'Open Test Reports') {
    doLast {
        java.awt.Desktop.desktop.browse (
            new File("${buildDir}/reports/tests/test", 'index.html').toURI()
        )
    }
}


test {
  minHeapSize = "4G" 
  maxHeapSize = "8G"
  maxParallelForks = 4 // easy with the parallel execution as some time sensitive tests may fail on small hardware
}

tasks.withType(JavaCompile) {
    options.deprecation = false
}

tasks.withType(Test) {
  jvmArgs("-XX:+EnableDynamicAgentLoading")
}

